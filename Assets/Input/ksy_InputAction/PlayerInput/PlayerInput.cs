//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/ksy_InputAction/PlayerInput/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterMove"",
            ""id"": ""2874ed7d-0ae9-447e-ad72-4226c2ae7ed8"",
            ""actions"": [
                {
                    ""name"": ""Activity"",
                    ""type"": ""Button"",
                    ""id"": ""a36288be-9c0e-421f-9d94-461c26a9a88e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction_Item"",
                    ""type"": ""Button"",
                    ""id"": ""00f3efed-a7a3-4773-8ee1-13b1b89a27d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b41a9af8-908b-4d07-8cc4-79d3cee7c9a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""a38ee063-05b6-4857-bbe6-e2302bdd391e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rush"",
                    ""type"": ""Button"",
                    ""id"": ""eb1e1690-12fa-499a-839b-e18666d678ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d492bb15-170e-4063-a1ed-bbfcda6ea9f0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""Activity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb32017b-71f2-4cca-bb7d-8ccf8f213af3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""Interaction_Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d26625cc-c27f-4900-8a2f-33261d914081"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""98010c2c-364c-4a4f-b93c-fc93c40e7c92"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""79fb3727-a37e-40b5-9681-6d8c9c151512"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""7daed137-7bc5-4ffe-8384-b21bfed199a7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5e500e90-84b0-480b-ad89-b21c0859b984"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1b618462-c60c-40fb-a9ca-ee196b10f41b"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdb06a75-d374-46a3-a9cc-519c07799edf"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""Rush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""2474a12b-38bc-42ea-88af-988334ffac57"",
            ""actions"": [
                {
                    ""name"": ""Test1"",
                    ""type"": ""Button"",
                    ""id"": ""343aafa8-5fee-4013-bb4a-898f2be5594e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test2"",
                    ""type"": ""Button"",
                    ""id"": ""d38cd2d8-b765-40e9-b2f5-fa462796ebeb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test3"",
                    ""type"": ""Button"",
                    ""id"": ""0c3192dd-be9b-4bb0-8eb6-03572dc56c4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test4"",
                    ""type"": ""Button"",
                    ""id"": ""e0a24e72-bcd7-4247-8735-32e8d1db1adf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test5"",
                    ""type"": ""Button"",
                    ""id"": ""a79b3d23-50fa-494c-a430-5d8d12761ec5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cfdfce37-59c3-4e50-b0a1-91a05976049a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a340e775-49e5-4a2e-a041-ee6bda0018dd"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a7fab21-3b50-43a4-adf7-77debf85c975"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2028c0c7-2fb6-4da8-8530-6cd1f5daf026"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d81a1ddb-a3b4-4aa2-bab7-3da5f9e5d74a"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OpenWindow"",
            ""id"": ""80af42f6-ef94-4b0c-9b29-63a5665475cd"",
            ""actions"": [
                {
                    ""name"": ""OpenItemWindow"",
                    ""type"": ""Button"",
                    ""id"": ""56db5f89-66f5-47cc-9c4c-2a5c09ea6bce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCraftWindow"",
                    ""type"": ""Button"",
                    ""id"": ""c7a86f0e-4a93-40dc-bcee-be584de0f595"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7785a48-c83b-4712-ae88-71a00fde11f6"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""OpenItemWindow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b51fe0a7-f87d-41c8-aa31-ce2eff32c431"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""OpenCraftWindow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoardAndMouse"",
            ""bindingGroup"": ""KeyBoardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CharacterMove
        m_CharacterMove = asset.FindActionMap("CharacterMove", throwIfNotFound: true);
        m_CharacterMove_Activity = m_CharacterMove.FindAction("Activity", throwIfNotFound: true);
        m_CharacterMove_Interaction_Item = m_CharacterMove.FindAction("Interaction_Item", throwIfNotFound: true);
        m_CharacterMove_Move = m_CharacterMove.FindAction("Move", throwIfNotFound: true);
        m_CharacterMove_MouseMove = m_CharacterMove.FindAction("MouseMove", throwIfNotFound: true);
        m_CharacterMove_Rush = m_CharacterMove.FindAction("Rush", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test1 = m_Test.FindAction("Test1", throwIfNotFound: true);
        m_Test_Test2 = m_Test.FindAction("Test2", throwIfNotFound: true);
        m_Test_Test3 = m_Test.FindAction("Test3", throwIfNotFound: true);
        m_Test_Test4 = m_Test.FindAction("Test4", throwIfNotFound: true);
        m_Test_Test5 = m_Test.FindAction("Test5", throwIfNotFound: true);
        // OpenWindow
        m_OpenWindow = asset.FindActionMap("OpenWindow", throwIfNotFound: true);
        m_OpenWindow_OpenItemWindow = m_OpenWindow.FindAction("OpenItemWindow", throwIfNotFound: true);
        m_OpenWindow_OpenCraftWindow = m_OpenWindow.FindAction("OpenCraftWindow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterMove
    private readonly InputActionMap m_CharacterMove;
    private ICharacterMoveActions m_CharacterMoveActionsCallbackInterface;
    private readonly InputAction m_CharacterMove_Activity;
    private readonly InputAction m_CharacterMove_Interaction_Item;
    private readonly InputAction m_CharacterMove_Move;
    private readonly InputAction m_CharacterMove_MouseMove;
    private readonly InputAction m_CharacterMove_Rush;
    public struct CharacterMoveActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterMoveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Activity => m_Wrapper.m_CharacterMove_Activity;
        public InputAction @Interaction_Item => m_Wrapper.m_CharacterMove_Interaction_Item;
        public InputAction @Move => m_Wrapper.m_CharacterMove_Move;
        public InputAction @MouseMove => m_Wrapper.m_CharacterMove_MouseMove;
        public InputAction @Rush => m_Wrapper.m_CharacterMove_Rush;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMoveActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterMoveActions instance)
        {
            if (m_Wrapper.m_CharacterMoveActionsCallbackInterface != null)
            {
                @Activity.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnActivity;
                @Activity.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnActivity;
                @Activity.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnActivity;
                @Interaction_Item.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnInteraction_Item;
                @Interaction_Item.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnInteraction_Item;
                @Interaction_Item.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnInteraction_Item;
                @Move.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMove;
                @MouseMove.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMouseMove;
                @Rush.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnRush;
                @Rush.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnRush;
                @Rush.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnRush;
            }
            m_Wrapper.m_CharacterMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Activity.started += instance.OnActivity;
                @Activity.performed += instance.OnActivity;
                @Activity.canceled += instance.OnActivity;
                @Interaction_Item.started += instance.OnInteraction_Item;
                @Interaction_Item.performed += instance.OnInteraction_Item;
                @Interaction_Item.canceled += instance.OnInteraction_Item;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @Rush.started += instance.OnRush;
                @Rush.performed += instance.OnRush;
                @Rush.canceled += instance.OnRush;
            }
        }
    }
    public CharacterMoveActions @CharacterMove => new CharacterMoveActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private ITestActions m_TestActionsCallbackInterface;
    private readonly InputAction m_Test_Test1;
    private readonly InputAction m_Test_Test2;
    private readonly InputAction m_Test_Test3;
    private readonly InputAction m_Test_Test4;
    private readonly InputAction m_Test_Test5;
    public struct TestActions
    {
        private @PlayerInput m_Wrapper;
        public TestActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test1 => m_Wrapper.m_Test_Test1;
        public InputAction @Test2 => m_Wrapper.m_Test_Test2;
        public InputAction @Test3 => m_Wrapper.m_Test_Test3;
        public InputAction @Test4 => m_Wrapper.m_Test_Test4;
        public InputAction @Test5 => m_Wrapper.m_Test_Test5;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void SetCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterface != null)
            {
                @Test1.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest1;
                @Test1.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest1;
                @Test1.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest1;
                @Test2.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest2;
                @Test2.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest2;
                @Test2.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest2;
                @Test3.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest3;
                @Test3.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest3;
                @Test3.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest3;
                @Test4.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest4;
                @Test4.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest4;
                @Test4.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest4;
                @Test5.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest5;
                @Test5.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest5;
                @Test5.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest5;
            }
            m_Wrapper.m_TestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Test1.started += instance.OnTest1;
                @Test1.performed += instance.OnTest1;
                @Test1.canceled += instance.OnTest1;
                @Test2.started += instance.OnTest2;
                @Test2.performed += instance.OnTest2;
                @Test2.canceled += instance.OnTest2;
                @Test3.started += instance.OnTest3;
                @Test3.performed += instance.OnTest3;
                @Test3.canceled += instance.OnTest3;
                @Test4.started += instance.OnTest4;
                @Test4.performed += instance.OnTest4;
                @Test4.canceled += instance.OnTest4;
                @Test5.started += instance.OnTest5;
                @Test5.performed += instance.OnTest5;
                @Test5.canceled += instance.OnTest5;
            }
        }
    }
    public TestActions @Test => new TestActions(this);

    // OpenWindow
    private readonly InputActionMap m_OpenWindow;
    private IOpenWindowActions m_OpenWindowActionsCallbackInterface;
    private readonly InputAction m_OpenWindow_OpenItemWindow;
    private readonly InputAction m_OpenWindow_OpenCraftWindow;
    public struct OpenWindowActions
    {
        private @PlayerInput m_Wrapper;
        public OpenWindowActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenItemWindow => m_Wrapper.m_OpenWindow_OpenItemWindow;
        public InputAction @OpenCraftWindow => m_Wrapper.m_OpenWindow_OpenCraftWindow;
        public InputActionMap Get() { return m_Wrapper.m_OpenWindow; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OpenWindowActions set) { return set.Get(); }
        public void SetCallbacks(IOpenWindowActions instance)
        {
            if (m_Wrapper.m_OpenWindowActionsCallbackInterface != null)
            {
                @OpenItemWindow.started -= m_Wrapper.m_OpenWindowActionsCallbackInterface.OnOpenItemWindow;
                @OpenItemWindow.performed -= m_Wrapper.m_OpenWindowActionsCallbackInterface.OnOpenItemWindow;
                @OpenItemWindow.canceled -= m_Wrapper.m_OpenWindowActionsCallbackInterface.OnOpenItemWindow;
                @OpenCraftWindow.started -= m_Wrapper.m_OpenWindowActionsCallbackInterface.OnOpenCraftWindow;
                @OpenCraftWindow.performed -= m_Wrapper.m_OpenWindowActionsCallbackInterface.OnOpenCraftWindow;
                @OpenCraftWindow.canceled -= m_Wrapper.m_OpenWindowActionsCallbackInterface.OnOpenCraftWindow;
            }
            m_Wrapper.m_OpenWindowActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenItemWindow.started += instance.OnOpenItemWindow;
                @OpenItemWindow.performed += instance.OnOpenItemWindow;
                @OpenItemWindow.canceled += instance.OnOpenItemWindow;
                @OpenCraftWindow.started += instance.OnOpenCraftWindow;
                @OpenCraftWindow.performed += instance.OnOpenCraftWindow;
                @OpenCraftWindow.canceled += instance.OnOpenCraftWindow;
            }
        }
    }
    public OpenWindowActions @OpenWindow => new OpenWindowActions(this);
    private int m_KeyBoardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardAndMouseScheme
    {
        get
        {
            if (m_KeyBoardAndMouseSchemeIndex == -1) m_KeyBoardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoardAndMouse");
            return asset.controlSchemes[m_KeyBoardAndMouseSchemeIndex];
        }
    }
    public interface ICharacterMoveActions
    {
        void OnActivity(InputAction.CallbackContext context);
        void OnInteraction_Item(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
        void OnRush(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest1(InputAction.CallbackContext context);
        void OnTest2(InputAction.CallbackContext context);
        void OnTest3(InputAction.CallbackContext context);
        void OnTest4(InputAction.CallbackContext context);
        void OnTest5(InputAction.CallbackContext context);
    }
    public interface IOpenWindowActions
    {
        void OnOpenItemWindow(InputAction.CallbackContext context);
        void OnOpenCraftWindow(InputAction.CallbackContext context);
    }
}
